
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "qPCRtools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "qPCRtools-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('qPCRtools')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CalCurve")
> ### * CalCurve
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalCurve
> ### Title: Standard Curve Calculation.
> ### Aliases: CalCurve
> 
> ### ** Examples
> 
> df.1.path <- system.file("examples", "calsc.cq.txt", package = "qPCRtools")
> df.2.path <- system.file("examples", "calsc.info.txt", package = "qPCRtools")
> df.1 <- data.table::fread(df.1.path)
> df.2 <- data.table::fread(df.2.path)
> CalCurve(
+   cq.table = df.1,
+   concen.table = df.2,
+   lowest.concen = 4,
+   highest.concen = 4096,
+   dilu = 4,
+   by = "mean"
+ ) -> p
> 
> p[["table"]]
   Gene                Formula Slope Intercept     R2 P.value max.Cq min.Cq
1 Gene1 y = -2.07*Conc + 40.08 -2.07     40.08 0.7502       0  40.00  27.33
2 Gene2 y = -2.09*Conc + 34.97 -2.09     34.97 0.9908       0  33.89  22.31
3 Gene3 y = -2.24*Conc + 33.34 -2.24     33.34 0.9969       0  31.39  19.59
4 Gene4 y = -2.21*Conc + 35.46 -2.21     35.46 0.9977       0  33.44  22.06
      E       Date
1 0.954 2022-07-24
2 0.941 2022-07-24
3 0.857 2022-07-24
4 0.873 2022-07-24
> p[["figure"]]
`geom_smooth()` using formula 'y ~ x'
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalCurve", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CalExp2ddCt")
> ### * CalExp2ddCt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalExp2ddCt
> ### Title: Calculate expression using standard curve.
> ### Aliases: CalExp2ddCt
> 
> ### ** Examples
> 
> df1.path = system.file("examples", "ddct.cq.txt", package = "qPCRtools")
> df2.path = system.file("examples", "ddct.design.txt", package = "qPCRtools")
> 
> cq.table = data.table::fread(df1.path)
> design.table = data.table::fread(df2.path)
> 
> CalExp2ddCt(cq.table,
+             design.table,
+             ref.gene = "OsUBQ",
+             ref.group = "CK",
+             stat.method = "t.test",
+             fig.type = "box",
+             fig.ncol = NULL) -> res
> 
> res[["table"]]
# A tibble: 40 x 10
   Treatment gene   biorep expre mean.expre sd.expre     n se.expre temp  signif
   <chr>     <chr>   <int> <dbl>      <dbl>    <dbl> <int>    <dbl> <chr> <chr> 
 1 Treatment OsPR10      1 0.540      0.690    0.274     4    0.345 OsPR~ NS    
 2 Treatment OsPR10      2 0.810      0.690    0.274     4    0.345 OsPR~ NS    
 3 Treatment OsPR10      3 0.398      0.690    0.274     4    0.345 OsPR~ NS    
 4 Treatment OsPR10      4 1.01       0.690    0.274     4    0.345 OsPR~ NS    
 5 CK        OsPR10      1 0.807      2.03     1.53      4    1.02  OsPR~ <NA>  
 6 CK        OsPR10      2 3.17       2.03     1.53      4    1.02  OsPR~ <NA>  
 7 CK        OsPR10      3 0.631      2.03     1.53      4    1.02  OsPR~ <NA>  
 8 CK        OsPR10      4 3.52       2.03     1.53      4    1.02  OsPR~ <NA>  
 9 Treatment OsCeB~      1 0.452      1.11     0.548     4    0.556 OsCe~ NS    
10 Treatment OsCeB~      2 1.67       1.11     0.548     4    0.556 OsCe~ NS    
# ... with 30 more rows
> res[["figure"]]
Warning: Removed 20 rows containing missing values (geom_text).
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalExp2ddCt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CalExpCurve")
> ### * CalExpCurve
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalExpCurve
> ### Title: Calculate expression using standard curve.
> ### Aliases: CalExpCurve
> 
> ### ** Examples
> 
> df1.path = system.file("examples", "cal.exp.curve.cq.txt", package = "qPCRtools")
> df2.path = system.file("examples", "cal.expre.curve.sdc.txt", package = "qPCRtools")
> df3.path = system.file("examples", "cal.exp.curve.design.txt", package = "qPCRtools")
> 
> cq.table = data.table::fread(df1.path)
> curve.table = data.table::fread(df2.path)
> design.table = data.table::fread(df3.path)
> 
> CalExpCurve(
+   cq.table,
+   curve.table,
+   design.table,
+   correction = TRUE,
+   ref.gene = "OsUBQ",
+   stat.method = "t.test",
+   ref.group = "CK",
+   fig.type = "box",
+   fig.ncol = NULL) -> res
Warning in CalExpCurve(cq.table, curve.table, design.table, correction = TRUE,  :
  Cq of A3 out of curve range!
> 
> res[["table"]]
# A tibble: 80 x 9
   Treatment Gene    expre temp      signif mean.expre sd.expre     n     se
   <chr>     <chr>   <dbl> <chr>     <chr>       <dbl>    <dbl> <int>  <dbl>
 1 CK        OSPOX8  1.03  OSPOX8CK  <NA>        1.04    0.0483     8 0.0171
 2 CK        OsWAK91 0.279 OsWAK91CK <NA>        0.763   0.212      8 0.0750
 3 CK        OsRBBI2 0.507 OsRBBI2CK <NA>        0.540   0.0431     8 0.0152
 4 CK        OsCeBip 0.904 OsCeBipCK <NA>        0.842   0.171      8 0.0606
 5 CK        OsPR10  1.13  OsPR10CK  <NA>        1.25    0.201      8 0.0711
 6 CK        OSPOX8  1.07  OSPOX8CK  <NA>        1.04    0.0483     8 0.0171
 7 CK        OsWAK91 0.734 OsWAK91CK <NA>        0.763   0.212      8 0.0750
 8 CK        OsRBBI2 0.497 OsRBBI2CK <NA>        0.540   0.0431     8 0.0152
 9 CK        OsCeBip 0.751 OsCeBipCK <NA>        0.842   0.171      8 0.0606
10 CK        OsPR10  1.06  OsPR10CK  <NA>        1.25    0.201      8 0.0711
# ... with 70 more rows
> res[["figure"]]
Warning: Removed 40 rows containing missing values (geom_text).
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalExpCurve", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CalExpRqPCR")
> ### * CalExpRqPCR
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalExpRqPCR
> ### Title: Calculate expression using standard curve.
> ### Aliases: CalExpRqPCR
> 
> ### ** Examples
> 
> df1.path <- system.file("examples", "cal.expre.rqpcr.cq.txt", package = "qPCRtools")
> df2.path <- system.file("examples", "cal.expre.rqpcr.design.txt", package = "qPCRtools")
> 
> cq.table <- data.table::fread(df1.path, header = TRUE)
> design.table <- data.table::fread(df2.path, header = TRUE)
> 
> CalExpRqPCR(cq.table,
+            design.table,
+            ref.gene = NULL,
+            ref.group = "CK",
+            stat.method = "t.test",
+            fig.type = "box",
+            fig.ncol = NULL
+            ) -> res
> 
> res[["table"]]
# A tibble: 32 x 7
# Groups:   gene [4]
   group biorep gene    Expre4Stat Expression    SD    SE
   <chr>  <int> <chr>        <dbl>      <dbl> <dbl> <dbl>
 1 CK         1 OSPOX8       1           1.39 0.541 0.270
 2 CK         1 OsWAK91      0.190       1    0.452 0.226
 3 CK         1 OsCeBip      1           1.12 0.502 0.251
 4 CK         1 OsPR10       1           1.95 0.624 0.312
 5 CK         2 OSPOX8       1.76        1.39 0.541 0.270
 6 CK         2 OsWAK91      0.303       1    0.452 0.226
 7 CK         2 OsCeBip      0.301       1.12 0.502 0.251
 8 CK         2 OsPR10       2.13        1.95 0.624 0.312
 9 CK         3 OSPOX8       1.17        1.39 0.541 0.270
10 CK         3 OsWAK91      0.501       1    0.452 0.226
# ... with 22 more rows
> res[["figure"]]
Warning: Removed 16 rows containing missing values (geom_text).
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalExpRqPCR", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CalRTable")
> ### * CalRTable
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalRTable
> ### Title: Calculate RNA volume for reverse transcription.
> ### Aliases: CalRTable
> 
> ### ** Examples
> 
> df.1.path <- system.file("examples", "crtv.data.txt", package = "qPCRtools")
> df.2.path <- system.file("examples", "crtv.template.txt", package = "qPCRtools")
> df.1 <- data.table::fread(df.1.path)
> df.2 <- data.table::fread(df.2.path)
> result <- CalRTable(data = df.1, template = df.2, RNA.weight = 2)
> head(result)
  sample     mean volume.RNA mix gDNARemover all volume.h2o
1      1 160.4000  12.468828   8           2  40   17.53117
2      2 163.3333  12.244898   8           2  40   17.75510
3      3 182.5667  10.954902   8           2  40   19.04510
4      4 203.8000   9.813543   8           2  40   20.18646
5      5 180.1333  11.102887   8           2  40   18.89711
6      6 171.8333  11.639185   8           2  40   18.36081
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalRTable", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.55 0.22 6.11 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
